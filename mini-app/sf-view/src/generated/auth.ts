// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: auth.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { grpc } from "@improbable-eng/grpc-web";
import { BrowserHeaders } from "browser-headers";

export const protobufPackage = "auth";

export enum VerifyCodeError {
  INVALID_PHONE = 0,
  INVALID_CODE = 1,
  EXPIRED = 2,
  TOO_MANY_ATTEMPTS = 3,
  UNRECOGNIZED = -1,
}

export enum TgAuthError {
  INVALID_TOKEN = 0,
  TOO_OLD_TOKEN = 1,
  USER_NOT_FOUND = 2,
  UNRECOGNIZED = -1,
}

export enum SendVerificationCodeError {
  INVALID_PHONE_NUMBER = 0,
  V_USER_NOT_FOUND = 1,
  ALREADY_SENT = 2,
  NOT_AVAILABLE = 3,
  UNRECOGNIZED = -1,
}

export interface SendVerificationCodeResponse {
  leftTime?: number | undefined;
  error?: SendVerificationCodeError | undefined;
}

export interface TgAuthResult {
  token?: string | undefined;
  error?: TgAuthError | undefined;
}

export interface VerifyCodeResponse {
  token?: string | undefined;
  error?: VerifyCodeError | undefined;
}

export interface TgKeyRequest {
  key: string;
}

export interface VerificationCodeRequest {
  phoneNumber: string;
}

export interface VerifyCodeRequest {
  phoneNumber: string;
  code: string;
}

function createBaseSendVerificationCodeResponse(): SendVerificationCodeResponse {
  return { leftTime: undefined, error: undefined };
}

export const SendVerificationCodeResponse: MessageFns<SendVerificationCodeResponse> = {
  encode(message: SendVerificationCodeResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.leftTime !== undefined) {
      writer.uint32(8).int32(message.leftTime);
    }
    if (message.error !== undefined) {
      writer.uint32(16).int32(message.error);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SendVerificationCodeResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSendVerificationCodeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.leftTime = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.error = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create<I extends Exact<DeepPartial<SendVerificationCodeResponse>, I>>(base?: I): SendVerificationCodeResponse {
    return SendVerificationCodeResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SendVerificationCodeResponse>, I>>(object: I): SendVerificationCodeResponse {
    const message = createBaseSendVerificationCodeResponse();
    message.leftTime = object.leftTime ?? undefined;
    message.error = object.error ?? undefined;
    return message;
  },
};

function createBaseTgAuthResult(): TgAuthResult {
  return { token: undefined, error: undefined };
}

export const TgAuthResult: MessageFns<TgAuthResult> = {
  encode(message: TgAuthResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.token !== undefined) {
      writer.uint32(10).string(message.token);
    }
    if (message.error !== undefined) {
      writer.uint32(16).int32(message.error);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TgAuthResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTgAuthResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.token = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.error = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create<I extends Exact<DeepPartial<TgAuthResult>, I>>(base?: I): TgAuthResult {
    return TgAuthResult.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TgAuthResult>, I>>(object: I): TgAuthResult {
    const message = createBaseTgAuthResult();
    message.token = object.token ?? undefined;
    message.error = object.error ?? undefined;
    return message;
  },
};

function createBaseVerifyCodeResponse(): VerifyCodeResponse {
  return { token: undefined, error: undefined };
}

export const VerifyCodeResponse: MessageFns<VerifyCodeResponse> = {
  encode(message: VerifyCodeResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.token !== undefined) {
      writer.uint32(10).string(message.token);
    }
    if (message.error !== undefined) {
      writer.uint32(16).int32(message.error);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VerifyCodeResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVerifyCodeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.token = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.error = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create<I extends Exact<DeepPartial<VerifyCodeResponse>, I>>(base?: I): VerifyCodeResponse {
    return VerifyCodeResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VerifyCodeResponse>, I>>(object: I): VerifyCodeResponse {
    const message = createBaseVerifyCodeResponse();
    message.token = object.token ?? undefined;
    message.error = object.error ?? undefined;
    return message;
  },
};

function createBaseTgKeyRequest(): TgKeyRequest {
  return { key: "" };
}

export const TgKeyRequest: MessageFns<TgKeyRequest> = {
  encode(message: TgKeyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TgKeyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTgKeyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create<I extends Exact<DeepPartial<TgKeyRequest>, I>>(base?: I): TgKeyRequest {
    return TgKeyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TgKeyRequest>, I>>(object: I): TgKeyRequest {
    const message = createBaseTgKeyRequest();
    message.key = object.key ?? "";
    return message;
  },
};

function createBaseVerificationCodeRequest(): VerificationCodeRequest {
  return { phoneNumber: "" };
}

export const VerificationCodeRequest: MessageFns<VerificationCodeRequest> = {
  encode(message: VerificationCodeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.phoneNumber !== "") {
      writer.uint32(10).string(message.phoneNumber);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VerificationCodeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVerificationCodeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.phoneNumber = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create<I extends Exact<DeepPartial<VerificationCodeRequest>, I>>(base?: I): VerificationCodeRequest {
    return VerificationCodeRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VerificationCodeRequest>, I>>(object: I): VerificationCodeRequest {
    const message = createBaseVerificationCodeRequest();
    message.phoneNumber = object.phoneNumber ?? "";
    return message;
  },
};

function createBaseVerifyCodeRequest(): VerifyCodeRequest {
  return { phoneNumber: "", code: "" };
}

export const VerifyCodeRequest: MessageFns<VerifyCodeRequest> = {
  encode(message: VerifyCodeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.phoneNumber !== "") {
      writer.uint32(10).string(message.phoneNumber);
    }
    if (message.code !== "") {
      writer.uint32(18).string(message.code);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VerifyCodeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVerifyCodeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.phoneNumber = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.code = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create<I extends Exact<DeepPartial<VerifyCodeRequest>, I>>(base?: I): VerifyCodeRequest {
    return VerifyCodeRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VerifyCodeRequest>, I>>(object: I): VerifyCodeRequest {
    const message = createBaseVerifyCodeRequest();
    message.phoneNumber = object.phoneNumber ?? "";
    message.code = object.code ?? "";
    return message;
  },
};

export interface AuthService {
  tg_auth(request: DeepPartial<TgKeyRequest>, metadata?: grpc.Metadata): Promise<TgAuthResult>;
  send_verification_code(
    request: DeepPartial<VerificationCodeRequest>,
    metadata?: grpc.Metadata,
  ): Promise<SendVerificationCodeResponse>;
  verify_code(request: DeepPartial<VerifyCodeRequest>, metadata?: grpc.Metadata): Promise<VerifyCodeResponse>;
}

export class AuthServiceClientImpl implements AuthService {
  private readonly rpc: Rpc;

  constructor(rpc: Rpc) {
    this.rpc = rpc;
    this.tg_auth = this.tg_auth.bind(this);
    this.send_verification_code = this.send_verification_code.bind(this);
    this.verify_code = this.verify_code.bind(this);
  }

  tg_auth(request: DeepPartial<TgKeyRequest>, metadata?: grpc.Metadata): Promise<TgAuthResult> {
    return this.rpc.unary(AuthServicetg_authDesc, TgKeyRequest.fromPartial(request), metadata);
  }

  send_verification_code(
    request: DeepPartial<VerificationCodeRequest>,
    metadata?: grpc.Metadata,
  ): Promise<SendVerificationCodeResponse> {
    return this.rpc.unary(
      AuthServicesend_verification_codeDesc,
      VerificationCodeRequest.fromPartial(request),
      metadata,
    );
  }

  verify_code(request: DeepPartial<VerifyCodeRequest>, metadata?: grpc.Metadata): Promise<VerifyCodeResponse> {
    return this.rpc.unary(AuthServiceverify_codeDesc, VerifyCodeRequest.fromPartial(request), metadata);
  }
}

export const AuthServiceDesc = { serviceName: "auth.AuthService" };

export const AuthServicetg_authDesc: UnaryMethodDefinitionish = {
  methodName: "tg_auth",
  service: AuthServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return TgKeyRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = TgAuthResult.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AuthServicesend_verification_codeDesc: UnaryMethodDefinitionish = {
  methodName: "send_verification_code",
  service: AuthServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return VerificationCodeRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = SendVerificationCodeResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const AuthServiceverify_codeDesc: UnaryMethodDefinitionish = {
  methodName: "verify_code",
  service: AuthServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return VerifyCodeRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = VerifyCodeResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

interface UnaryMethodDefinitionishR extends grpc.UnaryMethodDefinition<any, any> {
  requestStream: any;
  responseStream: any;
}

type UnaryMethodDefinitionish = UnaryMethodDefinitionishR;

interface Rpc {
  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    request: any,
    metadata: grpc.Metadata | undefined,
  ): Promise<any>;
}

export class GrpcWebImpl {
  private host: string;
  private options: {
    transport?: grpc.TransportFactory;

    debug?: boolean;
    metadata?: grpc.Metadata;
    upStreamRetryCodes?: number[];
  };

  constructor(
    host: string,
    options: {
      transport?: grpc.TransportFactory;

      debug?: boolean;
      metadata?: grpc.Metadata;
      upStreamRetryCodes?: number[];
    },
  ) {
    this.host = host;
    this.options = options;
  }

  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    _request: any,
    metadata: grpc.Metadata | undefined,
  ): Promise<any> {
    const request = { ..._request, ...methodDesc.requestType };
    const maybeCombinedMetadata = metadata && this.options.metadata
      ? new BrowserHeaders({ ...this.options?.metadata.headersMap, ...metadata?.headersMap })
      : metadata ?? this.options.metadata;
    return new Promise((resolve, reject) => {
      grpc.unary(methodDesc, {
        request,
        host: this.host,
        metadata: maybeCombinedMetadata ?? {},
        ...(this.options.transport !== undefined ? { transport: this.options.transport } : {}),
        debug: this.options.debug ?? false,
        onEnd: function (response) {
          if (response.status === grpc.Code.OK) {
            resolve(response.message!.toObject());
          } else {
            const err = new GrpcWebError(response.statusMessage, response.status, response.trailers);
            reject(err);
          }
        },
      });
    });
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

export class GrpcWebError extends globalThis.Error {
  constructor(message: string, public code: grpc.Code, public metadata: grpc.Metadata) {
    super(message);
  }
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
