// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: auth.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Status } from "./status";

export const protobufPackage = "auth";

export enum TgAuthError {
  INVALID_TOKEN = 0,
  TOO_OLD_TOKEN = 1,
  UNRECOGNIZED = -1,
}

export function tgAuthErrorFromJSON(object: any): TgAuthError {
  switch (object) {
    case 0:
    case "INVALID_TOKEN":
      return TgAuthError.INVALID_TOKEN;
    case 1:
    case "TOO_OLD_TOKEN":
      return TgAuthError.TOO_OLD_TOKEN;
    case -1:
    case "UNRECOGNIZED":
    default:
      return TgAuthError.UNRECOGNIZED;
  }
}

export function tgAuthErrorToJSON(object: TgAuthError): string {
  switch (object) {
    case TgAuthError.INVALID_TOKEN:
      return "INVALID_TOKEN";
    case TgAuthError.TOO_OLD_TOKEN:
      return "TOO_OLD_TOKEN";
    case TgAuthError.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface SendVerificationCodeResponse {
  error?: Status | undefined;
}

export interface TgAuthResult {
  token?: string | undefined;
  error?: TgAuthError | undefined;
}

export interface TokenResponse {
  token?: string | undefined;
  error?: Status | undefined;
}

export interface TgKeyRequest {
  key: string;
}

export interface VerificationCodeRequest {
  phoneNumber: string;
}

export interface VerifyCodeRequest {
  phoneNumber: string;
  code: string;
}

function createBaseSendVerificationCodeResponse(): SendVerificationCodeResponse {
  return { error: undefined };
}

export const SendVerificationCodeResponse: MessageFns<SendVerificationCodeResponse> = {
  encode(message: SendVerificationCodeResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.error !== undefined) {
      Status.encode(message.error, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SendVerificationCodeResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSendVerificationCodeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.error = Status.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SendVerificationCodeResponse {
    return { error: isSet(object.error) ? Status.fromJSON(object.error) : undefined };
  },

  toJSON(message: SendVerificationCodeResponse): unknown {
    const obj: any = {};
    if (message.error !== undefined) {
      obj.error = Status.toJSON(message.error);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SendVerificationCodeResponse>, I>>(base?: I): SendVerificationCodeResponse {
    return SendVerificationCodeResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SendVerificationCodeResponse>, I>>(object: I): SendVerificationCodeResponse {
    const message = createBaseSendVerificationCodeResponse();
    message.error = (object.error !== undefined && object.error !== null)
      ? Status.fromPartial(object.error)
      : undefined;
    return message;
  },
};

function createBaseTgAuthResult(): TgAuthResult {
  return { token: undefined, error: undefined };
}

export const TgAuthResult: MessageFns<TgAuthResult> = {
  encode(message: TgAuthResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.token !== undefined) {
      writer.uint32(10).string(message.token);
    }
    if (message.error !== undefined) {
      writer.uint32(16).int32(message.error);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TgAuthResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTgAuthResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.token = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.error = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TgAuthResult {
    return {
      token: isSet(object.token) ? globalThis.String(object.token) : undefined,
      error: isSet(object.error) ? tgAuthErrorFromJSON(object.error) : undefined,
    };
  },

  toJSON(message: TgAuthResult): unknown {
    const obj: any = {};
    if (message.token !== undefined) {
      obj.token = message.token;
    }
    if (message.error !== undefined) {
      obj.error = tgAuthErrorToJSON(message.error);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TgAuthResult>, I>>(base?: I): TgAuthResult {
    return TgAuthResult.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TgAuthResult>, I>>(object: I): TgAuthResult {
    const message = createBaseTgAuthResult();
    message.token = object.token ?? undefined;
    message.error = object.error ?? undefined;
    return message;
  },
};

function createBaseTokenResponse(): TokenResponse {
  return { token: undefined, error: undefined };
}

export const TokenResponse: MessageFns<TokenResponse> = {
  encode(message: TokenResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.token !== undefined) {
      writer.uint32(10).string(message.token);
    }
    if (message.error !== undefined) {
      Status.encode(message.error, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TokenResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTokenResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.token = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.error = Status.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TokenResponse {
    return {
      token: isSet(object.token) ? globalThis.String(object.token) : undefined,
      error: isSet(object.error) ? Status.fromJSON(object.error) : undefined,
    };
  },

  toJSON(message: TokenResponse): unknown {
    const obj: any = {};
    if (message.token !== undefined) {
      obj.token = message.token;
    }
    if (message.error !== undefined) {
      obj.error = Status.toJSON(message.error);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TokenResponse>, I>>(base?: I): TokenResponse {
    return TokenResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TokenResponse>, I>>(object: I): TokenResponse {
    const message = createBaseTokenResponse();
    message.token = object.token ?? undefined;
    message.error = (object.error !== undefined && object.error !== null)
      ? Status.fromPartial(object.error)
      : undefined;
    return message;
  },
};

function createBaseTgKeyRequest(): TgKeyRequest {
  return { key: "" };
}

export const TgKeyRequest: MessageFns<TgKeyRequest> = {
  encode(message: TgKeyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TgKeyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTgKeyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TgKeyRequest {
    return { key: isSet(object.key) ? globalThis.String(object.key) : "" };
  },

  toJSON(message: TgKeyRequest): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TgKeyRequest>, I>>(base?: I): TgKeyRequest {
    return TgKeyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TgKeyRequest>, I>>(object: I): TgKeyRequest {
    const message = createBaseTgKeyRequest();
    message.key = object.key ?? "";
    return message;
  },
};

function createBaseVerificationCodeRequest(): VerificationCodeRequest {
  return { phoneNumber: "" };
}

export const VerificationCodeRequest: MessageFns<VerificationCodeRequest> = {
  encode(message: VerificationCodeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.phoneNumber !== "") {
      writer.uint32(10).string(message.phoneNumber);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VerificationCodeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVerificationCodeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.phoneNumber = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VerificationCodeRequest {
    return { phoneNumber: isSet(object.phoneNumber) ? globalThis.String(object.phoneNumber) : "" };
  },

  toJSON(message: VerificationCodeRequest): unknown {
    const obj: any = {};
    if (message.phoneNumber !== "") {
      obj.phoneNumber = message.phoneNumber;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VerificationCodeRequest>, I>>(base?: I): VerificationCodeRequest {
    return VerificationCodeRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VerificationCodeRequest>, I>>(object: I): VerificationCodeRequest {
    const message = createBaseVerificationCodeRequest();
    message.phoneNumber = object.phoneNumber ?? "";
    return message;
  },
};

function createBaseVerifyCodeRequest(): VerifyCodeRequest {
  return { phoneNumber: "", code: "" };
}

export const VerifyCodeRequest: MessageFns<VerifyCodeRequest> = {
  encode(message: VerifyCodeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.phoneNumber !== "") {
      writer.uint32(10).string(message.phoneNumber);
    }
    if (message.code !== "") {
      writer.uint32(18).string(message.code);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VerifyCodeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVerifyCodeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.phoneNumber = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.code = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VerifyCodeRequest {
    return {
      phoneNumber: isSet(object.phoneNumber) ? globalThis.String(object.phoneNumber) : "",
      code: isSet(object.code) ? globalThis.String(object.code) : "",
    };
  },

  toJSON(message: VerifyCodeRequest): unknown {
    const obj: any = {};
    if (message.phoneNumber !== "") {
      obj.phoneNumber = message.phoneNumber;
    }
    if (message.code !== "") {
      obj.code = message.code;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VerifyCodeRequest>, I>>(base?: I): VerifyCodeRequest {
    return VerifyCodeRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VerifyCodeRequest>, I>>(object: I): VerifyCodeRequest {
    const message = createBaseVerifyCodeRequest();
    message.phoneNumber = object.phoneNumber ?? "";
    message.code = object.code ?? "";
    return message;
  },
};

export interface AuthService {
  tg_auth(request: TgKeyRequest): Promise<TgAuthResult>;
  send_verification_code(request: VerificationCodeRequest): Promise<SendVerificationCodeResponse>;
  verify_code(request: VerifyCodeRequest): Promise<TokenResponse>;
}

export const AuthServiceServiceName = "auth.AuthService";
export class AuthServiceClientImpl implements AuthService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || AuthServiceServiceName;
    this.rpc = rpc;
    this.tg_auth = this.tg_auth.bind(this);
    this.send_verification_code = this.send_verification_code.bind(this);
    this.verify_code = this.verify_code.bind(this);
  }
  tg_auth(request: TgKeyRequest): Promise<TgAuthResult> {
    const data = TgKeyRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "tg_auth", data);
    return promise.then((data) => TgAuthResult.decode(new BinaryReader(data)));
  }

  send_verification_code(request: VerificationCodeRequest): Promise<SendVerificationCodeResponse> {
    const data = VerificationCodeRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "send_verification_code", data);
    return promise.then((data) => SendVerificationCodeResponse.decode(new BinaryReader(data)));
  }

  verify_code(request: VerifyCodeRequest): Promise<TokenResponse> {
    const data = VerifyCodeRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "verify_code", data);
    return promise.then((data) => TokenResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
