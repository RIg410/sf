// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: user.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { ObjectId } from "./id";
import { SubscriptionTypeView } from "./subscription";

export const protobufPackage = "user";

export enum SourceView {
  UNKNOWN = 0,
  WEBSITE = 1,
  INSTAGRAM = 2,
  VK = 3,
  YANDEX_MAP = 4,
  YANDEX_DIRECT = 5,
  DIRECT_ADDS = 6,
  VK_ADDS = 7,
  DOUBLE_GIS = 8,
  AVITO = 9,
  RECOMMENDATION = 10,
  OTHER = 11,
  WEB_SEARCH = 12,
  OLD_BASE = 13,
  UNRECOGNIZED = -1,
}

export enum RuleView {
  VIEW_PROFILE = 0,
  VIEW_USERS = 1,
  EDIT_USER_RIGHTS = 2,
  BLOCK_USER = 3,
  EDIT_USER_INFO = 4,
  EDIT_USER_SUBSCRIPTION = 5,
  FREEZE_USERS = 6,
  CHANGE_BALANCE = 7,
  EDIT_MARKETING_INFO = 8,
  EDIT_FAMILY = 9,
  VIEW_FAMILY = 10,
  EDIT_AI_PROMPT = 11,
  VIEW_USER_COMMENTS = 12,
  EDIT_USER_COMMENTS = 13,
  DELETE_USER_COMMENTS = 14,
  EDIT_TRAINING = 15,
  CREATE_TRAINING = 16,
  EDIT_TRAINING_CLIENTS_LIST = 17,
  SET_KEEP_OPEN = 18,
  SET_FREE = 19,
  EDIT_SCHEDULE = 20,
  CANCEL_TRAINING = 21,
  REMOVE_TRAINING = 22,
  EDIT_TRAINING_COUCH = 23,
  SCHEDULE_GROUP_TRAINING = 24,
  SCHEDULE_PERSONAL_TRAINING = 25,
  SCHEDULE_SUB_RENT = 26,
  SELECT_PERSONAL_INSTRUCTOR = 27,
  VIEW_ALL_TRAININGS = 28,
  CHANGE_TRAINING_SLOT = 29,
  CREATE_SUBSCRIPTION = 30,
  EDIT_SUBSCRIPTION = 31,
  SELL_SUBSCRIPTION = 32,
  FREE_SELL = 33,
  SUB_RENT = 34,
  VIEW_FINANCE = 35,
  MAKE_PAYMENT = 36,
  MAKE_DEPOSIT = 37,
  FINANCE_HISTORICAL_DATE = 38,
  DELETE_HISTORY = 39,
  VIEW_EMPLOYEES = 40,
  EDIT_EMPLOYEE = 41,
  EDIT_EMPLOYEE_RATES = 42,
  VIEW_LOGS = 43,
  CREATE_COUCH = 44,
  EDIT_COUCH = 45,
  VIEW_COUCH_RATES = 46,
  VIEW_STATISTICS = 47,
  SYSTEM = 48,
  VIEW_REWARDS = 49,
  RECALCULATE_REWARDS = 50,
  VIEW_MARKETING_INFO = 51,
  CREATE_REQUEST = 52,
  REQUESTS_HISTORY = 53,
  RECEIVE_NOTIFICATIONS_ABOUT_SUBSCRIPTIONS = 54,
  RECEIVE_NOTIFICATIONS_ABOUT_BIRTHDAYS = 55,
  RECEIVE_AI_NOTIFICATIONS = 56,
  MINI_APP = 57,
  BUY_SUBSCRIPTION = 58,
  VIEW_HIDDEN_PROGRAMS = 59,
  HISTORY_VIEWER = 60,
  AI_STATISTIC = 61,
  AI_USER_INFO = 62,
  SELECT_MODEL = 63,
  UNRECOGNIZED = -1,
}

export enum EmployeeRoleView {
  COUCH = 0,
  MANAGER = 1,
  ADMIN = 2,
  UNRECOGNIZED = -1,
}

export interface UserView {
  id: ObjectId | undefined;
  tgId: number;
  name: UserNameView | undefined;
  rights: RightsView | undefined;
  phone?: string | undefined;
  isActive: boolean;
  freeze?: FreezeView | undefined;
  subscriptions: UserSubscriptionView[];
  freezeDays: number;
  employee?: EmployeeView | undefined;
  comeFrom?: SourceView | undefined;
  family?: FamilyView | undefined;
}

export interface UserNameView {
  tgUserName?: string | undefined;
  firstName: string;
  lastName?: string | undefined;
}

export interface FreezeView {
  freezeStart: number;
  freezeEnd: number;
}

export interface UserSubscriptionView {
  id: ObjectId | undefined;
  subscriptionId: ObjectId | undefined;
  name: string;
  items: number;
  days: number;
  status: StatusView | undefined;
  price: number;
  tp: SubscriptionTypeView | undefined;
  balance: number;
  lockedBalance: number;
  unlimited: boolean;
  discount?: number | undefined;
  itemPrice?: number | undefined;
}

export interface EmployeeView {
  role: EmployeeRoleView;
  description: string;
  reward: number;
  rates: RateView[];
}

export interface FamilyView {
  isIndividual: boolean;
  payer?: UserView | undefined;
  children: UserView[];
}

export interface RightsView {
  full: boolean;
  rights: RuleView[];
}

export interface RateView {
  fix?: FixRateView | undefined;
  groupTraining?: GroupTrainingRateView | undefined;
  personalTraining?: PersonalTrainingRateView | undefined;
}

export interface FixRateView {
  amount: number;
  nextPaymentDate: number;
  rewardInterval: IntervalView | undefined;
}

export interface GroupTrainingRateView {
  percent: number;
  minReward: number;
}

export interface PersonalTrainingRateView {
  percent: number;
}

export interface IntervalView {
  monthNum: number;
}

export interface StatusView {
  notActive?: NotActive | undefined;
  active?: ActiveStatusView | undefined;
}

export interface NotActive {
}

export interface ActiveStatusView {
  startDate: number;
  endDate: number;
}

function createBaseUserView(): UserView {
  return {
    id: undefined,
    tgId: 0,
    name: undefined,
    rights: undefined,
    phone: undefined,
    isActive: false,
    freeze: undefined,
    subscriptions: [],
    freezeDays: 0,
    employee: undefined,
    comeFrom: undefined,
    family: undefined,
  };
}

export const UserView: MessageFns<UserView> = {
  encode(message: UserView, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      ObjectId.encode(message.id, writer.uint32(10).fork()).join();
    }
    if (message.tgId !== 0) {
      writer.uint32(16).int64(message.tgId);
    }
    if (message.name !== undefined) {
      UserNameView.encode(message.name, writer.uint32(26).fork()).join();
    }
    if (message.rights !== undefined) {
      RightsView.encode(message.rights, writer.uint32(34).fork()).join();
    }
    if (message.phone !== undefined) {
      writer.uint32(42).string(message.phone);
    }
    if (message.isActive !== false) {
      writer.uint32(48).bool(message.isActive);
    }
    if (message.freeze !== undefined) {
      FreezeView.encode(message.freeze, writer.uint32(58).fork()).join();
    }
    for (const v of message.subscriptions) {
      UserSubscriptionView.encode(v!, writer.uint32(66).fork()).join();
    }
    if (message.freezeDays !== 0) {
      writer.uint32(72).uint32(message.freezeDays);
    }
    if (message.employee !== undefined) {
      EmployeeView.encode(message.employee, writer.uint32(98).fork()).join();
    }
    if (message.comeFrom !== undefined) {
      writer.uint32(104).int32(message.comeFrom);
    }
    if (message.family !== undefined) {
      FamilyView.encode(message.family, writer.uint32(114).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserView {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserView();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = ObjectId.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.tgId = longToNumber(reader.int64());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.name = UserNameView.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.rights = RightsView.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.phone = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.isActive = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.freeze = FreezeView.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.subscriptions.push(UserSubscriptionView.decode(reader, reader.uint32()));
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.freezeDays = reader.uint32();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.employee = EmployeeView.decode(reader, reader.uint32());
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.comeFrom = reader.int32() as any;
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.family = FamilyView.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create<I extends Exact<DeepPartial<UserView>, I>>(base?: I): UserView {
    return UserView.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserView>, I>>(object: I): UserView {
    const message = createBaseUserView();
    message.id = (object.id !== undefined && object.id !== null) ? ObjectId.fromPartial(object.id) : undefined;
    message.tgId = object.tgId ?? 0;
    message.name = (object.name !== undefined && object.name !== null)
      ? UserNameView.fromPartial(object.name)
      : undefined;
    message.rights = (object.rights !== undefined && object.rights !== null)
      ? RightsView.fromPartial(object.rights)
      : undefined;
    message.phone = object.phone ?? undefined;
    message.isActive = object.isActive ?? false;
    message.freeze = (object.freeze !== undefined && object.freeze !== null)
      ? FreezeView.fromPartial(object.freeze)
      : undefined;
    message.subscriptions = object.subscriptions?.map((e) => UserSubscriptionView.fromPartial(e)) || [];
    message.freezeDays = object.freezeDays ?? 0;
    message.employee = (object.employee !== undefined && object.employee !== null)
      ? EmployeeView.fromPartial(object.employee)
      : undefined;
    message.comeFrom = object.comeFrom ?? undefined;
    message.family = (object.family !== undefined && object.family !== null)
      ? FamilyView.fromPartial(object.family)
      : undefined;
    return message;
  },
};

function createBaseUserNameView(): UserNameView {
  return { tgUserName: undefined, firstName: "", lastName: undefined };
}

export const UserNameView: MessageFns<UserNameView> = {
  encode(message: UserNameView, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tgUserName !== undefined) {
      writer.uint32(10).string(message.tgUserName);
    }
    if (message.firstName !== "") {
      writer.uint32(18).string(message.firstName);
    }
    if (message.lastName !== undefined) {
      writer.uint32(26).string(message.lastName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserNameView {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserNameView();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tgUserName = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.firstName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.lastName = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create<I extends Exact<DeepPartial<UserNameView>, I>>(base?: I): UserNameView {
    return UserNameView.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserNameView>, I>>(object: I): UserNameView {
    const message = createBaseUserNameView();
    message.tgUserName = object.tgUserName ?? undefined;
    message.firstName = object.firstName ?? "";
    message.lastName = object.lastName ?? undefined;
    return message;
  },
};

function createBaseFreezeView(): FreezeView {
  return { freezeStart: 0, freezeEnd: 0 };
}

export const FreezeView: MessageFns<FreezeView> = {
  encode(message: FreezeView, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.freezeStart !== 0) {
      writer.uint32(8).int64(message.freezeStart);
    }
    if (message.freezeEnd !== 0) {
      writer.uint32(16).int64(message.freezeEnd);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FreezeView {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFreezeView();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.freezeStart = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.freezeEnd = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create<I extends Exact<DeepPartial<FreezeView>, I>>(base?: I): FreezeView {
    return FreezeView.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FreezeView>, I>>(object: I): FreezeView {
    const message = createBaseFreezeView();
    message.freezeStart = object.freezeStart ?? 0;
    message.freezeEnd = object.freezeEnd ?? 0;
    return message;
  },
};

function createBaseUserSubscriptionView(): UserSubscriptionView {
  return {
    id: undefined,
    subscriptionId: undefined,
    name: "",
    items: 0,
    days: 0,
    status: undefined,
    price: 0,
    tp: undefined,
    balance: 0,
    lockedBalance: 0,
    unlimited: false,
    discount: undefined,
    itemPrice: undefined,
  };
}

export const UserSubscriptionView: MessageFns<UserSubscriptionView> = {
  encode(message: UserSubscriptionView, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      ObjectId.encode(message.id, writer.uint32(10).fork()).join();
    }
    if (message.subscriptionId !== undefined) {
      ObjectId.encode(message.subscriptionId, writer.uint32(18).fork()).join();
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    if (message.items !== 0) {
      writer.uint32(32).uint32(message.items);
    }
    if (message.days !== 0) {
      writer.uint32(40).uint32(message.days);
    }
    if (message.status !== undefined) {
      StatusView.encode(message.status, writer.uint32(50).fork()).join();
    }
    if (message.price !== 0) {
      writer.uint32(56).int64(message.price);
    }
    if (message.tp !== undefined) {
      SubscriptionTypeView.encode(message.tp, writer.uint32(66).fork()).join();
    }
    if (message.balance !== 0) {
      writer.uint32(72).uint32(message.balance);
    }
    if (message.lockedBalance !== 0) {
      writer.uint32(80).uint32(message.lockedBalance);
    }
    if (message.unlimited !== false) {
      writer.uint32(88).bool(message.unlimited);
    }
    if (message.discount !== undefined) {
      writer.uint32(96).int64(message.discount);
    }
    if (message.itemPrice !== undefined) {
      writer.uint32(104).int64(message.itemPrice);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserSubscriptionView {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserSubscriptionView();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = ObjectId.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.subscriptionId = ObjectId.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.items = reader.uint32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.days = reader.uint32();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.status = StatusView.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.price = longToNumber(reader.int64());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.tp = SubscriptionTypeView.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.balance = reader.uint32();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.lockedBalance = reader.uint32();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.unlimited = reader.bool();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.discount = longToNumber(reader.int64());
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.itemPrice = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create<I extends Exact<DeepPartial<UserSubscriptionView>, I>>(base?: I): UserSubscriptionView {
    return UserSubscriptionView.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserSubscriptionView>, I>>(object: I): UserSubscriptionView {
    const message = createBaseUserSubscriptionView();
    message.id = (object.id !== undefined && object.id !== null) ? ObjectId.fromPartial(object.id) : undefined;
    message.subscriptionId = (object.subscriptionId !== undefined && object.subscriptionId !== null)
      ? ObjectId.fromPartial(object.subscriptionId)
      : undefined;
    message.name = object.name ?? "";
    message.items = object.items ?? 0;
    message.days = object.days ?? 0;
    message.status = (object.status !== undefined && object.status !== null)
      ? StatusView.fromPartial(object.status)
      : undefined;
    message.price = object.price ?? 0;
    message.tp = (object.tp !== undefined && object.tp !== null)
      ? SubscriptionTypeView.fromPartial(object.tp)
      : undefined;
    message.balance = object.balance ?? 0;
    message.lockedBalance = object.lockedBalance ?? 0;
    message.unlimited = object.unlimited ?? false;
    message.discount = object.discount ?? undefined;
    message.itemPrice = object.itemPrice ?? undefined;
    return message;
  },
};

function createBaseEmployeeView(): EmployeeView {
  return { role: 0, description: "", reward: 0, rates: [] };
}

export const EmployeeView: MessageFns<EmployeeView> = {
  encode(message: EmployeeView, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.role !== 0) {
      writer.uint32(8).int32(message.role);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.reward !== 0) {
      writer.uint32(24).int64(message.reward);
    }
    for (const v of message.rates) {
      RateView.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EmployeeView {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEmployeeView();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.role = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.reward = longToNumber(reader.int64());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.rates.push(RateView.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create<I extends Exact<DeepPartial<EmployeeView>, I>>(base?: I): EmployeeView {
    return EmployeeView.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EmployeeView>, I>>(object: I): EmployeeView {
    const message = createBaseEmployeeView();
    message.role = object.role ?? 0;
    message.description = object.description ?? "";
    message.reward = object.reward ?? 0;
    message.rates = object.rates?.map((e) => RateView.fromPartial(e)) || [];
    return message;
  },
};

function createBaseFamilyView(): FamilyView {
  return { isIndividual: false, payer: undefined, children: [] };
}

export const FamilyView: MessageFns<FamilyView> = {
  encode(message: FamilyView, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.isIndividual !== false) {
      writer.uint32(16).bool(message.isIndividual);
    }
    if (message.payer !== undefined) {
      UserView.encode(message.payer, writer.uint32(26).fork()).join();
    }
    for (const v of message.children) {
      UserView.encode(v!, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FamilyView {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFamilyView();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.isIndividual = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.payer = UserView.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.children.push(UserView.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create<I extends Exact<DeepPartial<FamilyView>, I>>(base?: I): FamilyView {
    return FamilyView.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FamilyView>, I>>(object: I): FamilyView {
    const message = createBaseFamilyView();
    message.isIndividual = object.isIndividual ?? false;
    message.payer = (object.payer !== undefined && object.payer !== null)
      ? UserView.fromPartial(object.payer)
      : undefined;
    message.children = object.children?.map((e) => UserView.fromPartial(e)) || [];
    return message;
  },
};

function createBaseRightsView(): RightsView {
  return { full: false, rights: [] };
}

export const RightsView: MessageFns<RightsView> = {
  encode(message: RightsView, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.full !== false) {
      writer.uint32(8).bool(message.full);
    }
    writer.uint32(18).fork();
    for (const v of message.rights) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RightsView {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRightsView();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.full = reader.bool();
          continue;
        }
        case 2: {
          if (tag === 16) {
            message.rights.push(reader.int32() as any);

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.rights.push(reader.int32() as any);
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create<I extends Exact<DeepPartial<RightsView>, I>>(base?: I): RightsView {
    return RightsView.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RightsView>, I>>(object: I): RightsView {
    const message = createBaseRightsView();
    message.full = object.full ?? false;
    message.rights = object.rights?.map((e) => e) || [];
    return message;
  },
};

function createBaseRateView(): RateView {
  return { fix: undefined, groupTraining: undefined, personalTraining: undefined };
}

export const RateView: MessageFns<RateView> = {
  encode(message: RateView, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.fix !== undefined) {
      FixRateView.encode(message.fix, writer.uint32(10).fork()).join();
    }
    if (message.groupTraining !== undefined) {
      GroupTrainingRateView.encode(message.groupTraining, writer.uint32(18).fork()).join();
    }
    if (message.personalTraining !== undefined) {
      PersonalTrainingRateView.encode(message.personalTraining, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RateView {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRateView();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.fix = FixRateView.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.groupTraining = GroupTrainingRateView.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.personalTraining = PersonalTrainingRateView.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create<I extends Exact<DeepPartial<RateView>, I>>(base?: I): RateView {
    return RateView.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RateView>, I>>(object: I): RateView {
    const message = createBaseRateView();
    message.fix = (object.fix !== undefined && object.fix !== null) ? FixRateView.fromPartial(object.fix) : undefined;
    message.groupTraining = (object.groupTraining !== undefined && object.groupTraining !== null)
      ? GroupTrainingRateView.fromPartial(object.groupTraining)
      : undefined;
    message.personalTraining = (object.personalTraining !== undefined && object.personalTraining !== null)
      ? PersonalTrainingRateView.fromPartial(object.personalTraining)
      : undefined;
    return message;
  },
};

function createBaseFixRateView(): FixRateView {
  return { amount: 0, nextPaymentDate: 0, rewardInterval: undefined };
}

export const FixRateView: MessageFns<FixRateView> = {
  encode(message: FixRateView, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.amount !== 0) {
      writer.uint32(8).int64(message.amount);
    }
    if (message.nextPaymentDate !== 0) {
      writer.uint32(16).int64(message.nextPaymentDate);
    }
    if (message.rewardInterval !== undefined) {
      IntervalView.encode(message.rewardInterval, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FixRateView {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFixRateView();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.amount = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.nextPaymentDate = longToNumber(reader.int64());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.rewardInterval = IntervalView.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create<I extends Exact<DeepPartial<FixRateView>, I>>(base?: I): FixRateView {
    return FixRateView.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FixRateView>, I>>(object: I): FixRateView {
    const message = createBaseFixRateView();
    message.amount = object.amount ?? 0;
    message.nextPaymentDate = object.nextPaymentDate ?? 0;
    message.rewardInterval = (object.rewardInterval !== undefined && object.rewardInterval !== null)
      ? IntervalView.fromPartial(object.rewardInterval)
      : undefined;
    return message;
  },
};

function createBaseGroupTrainingRateView(): GroupTrainingRateView {
  return { percent: 0, minReward: 0 };
}

export const GroupTrainingRateView: MessageFns<GroupTrainingRateView> = {
  encode(message: GroupTrainingRateView, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.percent !== 0) {
      writer.uint32(8).int64(message.percent);
    }
    if (message.minReward !== 0) {
      writer.uint32(16).int64(message.minReward);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GroupTrainingRateView {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGroupTrainingRateView();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.percent = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.minReward = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create<I extends Exact<DeepPartial<GroupTrainingRateView>, I>>(base?: I): GroupTrainingRateView {
    return GroupTrainingRateView.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GroupTrainingRateView>, I>>(object: I): GroupTrainingRateView {
    const message = createBaseGroupTrainingRateView();
    message.percent = object.percent ?? 0;
    message.minReward = object.minReward ?? 0;
    return message;
  },
};

function createBasePersonalTrainingRateView(): PersonalTrainingRateView {
  return { percent: 0 };
}

export const PersonalTrainingRateView: MessageFns<PersonalTrainingRateView> = {
  encode(message: PersonalTrainingRateView, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.percent !== 0) {
      writer.uint32(8).int64(message.percent);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PersonalTrainingRateView {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePersonalTrainingRateView();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.percent = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create<I extends Exact<DeepPartial<PersonalTrainingRateView>, I>>(base?: I): PersonalTrainingRateView {
    return PersonalTrainingRateView.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PersonalTrainingRateView>, I>>(object: I): PersonalTrainingRateView {
    const message = createBasePersonalTrainingRateView();
    message.percent = object.percent ?? 0;
    return message;
  },
};

function createBaseIntervalView(): IntervalView {
  return { monthNum: 0 };
}

export const IntervalView: MessageFns<IntervalView> = {
  encode(message: IntervalView, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.monthNum !== 0) {
      writer.uint32(8).uint32(message.monthNum);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IntervalView {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIntervalView();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.monthNum = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create<I extends Exact<DeepPartial<IntervalView>, I>>(base?: I): IntervalView {
    return IntervalView.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IntervalView>, I>>(object: I): IntervalView {
    const message = createBaseIntervalView();
    message.monthNum = object.monthNum ?? 0;
    return message;
  },
};

function createBaseStatusView(): StatusView {
  return { notActive: undefined, active: undefined };
}

export const StatusView: MessageFns<StatusView> = {
  encode(message: StatusView, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.notActive !== undefined) {
      NotActive.encode(message.notActive, writer.uint32(10).fork()).join();
    }
    if (message.active !== undefined) {
      ActiveStatusView.encode(message.active, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StatusView {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStatusView();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.notActive = NotActive.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.active = ActiveStatusView.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create<I extends Exact<DeepPartial<StatusView>, I>>(base?: I): StatusView {
    return StatusView.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StatusView>, I>>(object: I): StatusView {
    const message = createBaseStatusView();
    message.notActive = (object.notActive !== undefined && object.notActive !== null)
      ? NotActive.fromPartial(object.notActive)
      : undefined;
    message.active = (object.active !== undefined && object.active !== null)
      ? ActiveStatusView.fromPartial(object.active)
      : undefined;
    return message;
  },
};

function createBaseNotActive(): NotActive {
  return {};
}

export const NotActive: MessageFns<NotActive> = {
  encode(_: NotActive, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NotActive {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNotActive();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create<I extends Exact<DeepPartial<NotActive>, I>>(base?: I): NotActive {
    return NotActive.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<NotActive>, I>>(_: I): NotActive {
    const message = createBaseNotActive();
    return message;
  },
};

function createBaseActiveStatusView(): ActiveStatusView {
  return { startDate: 0, endDate: 0 };
}

export const ActiveStatusView: MessageFns<ActiveStatusView> = {
  encode(message: ActiveStatusView, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.startDate !== 0) {
      writer.uint32(8).int64(message.startDate);
    }
    if (message.endDate !== 0) {
      writer.uint32(16).int64(message.endDate);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ActiveStatusView {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActiveStatusView();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.startDate = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.endDate = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create<I extends Exact<DeepPartial<ActiveStatusView>, I>>(base?: I): ActiveStatusView {
    return ActiveStatusView.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ActiveStatusView>, I>>(object: I): ActiveStatusView {
    const message = createBaseActiveStatusView();
    message.startDate = object.startDate ?? 0;
    message.endDate = object.endDate ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
